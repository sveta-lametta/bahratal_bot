from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, ConversationHandler
import logging
import os

# –≠—Ç–∞–ø—ã –∞–Ω–∫–µ—Ç—ã
NAME, GENDER, AGE, TYPE, ROLE = range(5)
results = []

gender_kb = ReplyKeyboardMarkup([["üë¶ –ú", "üëß –ñ", "üåà –î—Ä—É–≥–æ–µ"]], one_time_keyboard=True, resize_keyboard=True)
type_kb = ReplyKeyboardMarkup([
    ["üê¢ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –æ–±—â–∞—Ç—å—Å—è —Å 1‚Äì2 –ª—é–¥—å–º–∏ –∏–ª–∏ –±—ã—Ç—å –æ–¥–∏–Ω"],
    ["üêç –ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ –∏ –≤ –æ–¥–∏–Ω–æ—á–∫—É, –∏ –≤ –∫–æ–º–ø–∞–Ω–∏–∏"],
    ["ü¶Ö –õ—é–±–ª—é –±—ã—Ç—å —Å—Ä–µ–¥–∏ –ª—é–¥–µ–π, –ª–µ–≥–∫–æ –∑–∞–≤–æ–∂—É –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞"]
], one_time_keyboard=True, resize_keyboard=True)
role_kb = ReplyKeyboardMarkup([
    ["üîß –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å", "üí° –ü—Ä–∏–¥—É–º—ã–≤–∞—Ç—å –∏–¥–µ–∏"],
    ["üß≠ –†—É–∫–æ–≤–æ–¥–∏—Ç—å", "üëÄ –ù–∞–±–ª—é–¥–∞—Ç—å"]
], one_time_keyboard=True, resize_keyboard=True)

def start(update: Update, context: CallbackContext) -> int:
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    return NAME

def get_name(update: Update, context: CallbackContext) -> int:
    context.user_data['name'] = update.message.text
    update.message.reply_text("–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=gender_kb)
    return GENDER

def get_gender(update: Update, context: CallbackContext) -> int:
    context.user_data['gender'] = update.message.text
    update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    return AGE

def get_age(update: Update, context: CallbackContext) -> int:
    context.user_data['age'] = update.message.text
    update.message.reply_text("–ö–∞–∫ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π?", reply_markup=type_kb)
    return TYPE

def get_type(update: Update, context: CallbackContext) -> int:
    context.user_data['type'] = update.message.text.split(" ", 1)[1]
    update.message.reply_text("–ß—Ç–æ —Ç–µ–±–µ –±–ª–∏–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ?", reply_markup=role_kb)
    return ROLE

def get_role(update: Update, context: CallbackContext) -> int:
    context.user_data['role'] = update.message.text.split(" ", 1)[1]
    update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã ‚úÖ")
    return ConversationHandler.END

def cancel(update: Update, context: CallbackContext) -> int:
    update.message.reply_text("–û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

def main():
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    updater = Updater(BOT_TOKEN)
    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            NAME: [MessageHandler(Filters.text & ~Filters.command, get_name)],
            GENDER: [MessageHandler(Filters.text & ~Filters.command, get_gender)],
            AGE: [MessageHandler(Filters.text & ~Filters.command, get_age)],
            TYPE: [MessageHandler(Filters.text & ~Filters.command, get_type)],
            ROLE: [MessageHandler(Filters.text & ~Filters.command, get_role)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    dp.add_handler(conv_handler)
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    main()
